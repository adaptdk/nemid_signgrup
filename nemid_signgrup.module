<?php
/**
 * @file
 * NemID Signaturgruppen.
 */

define('NEMID_SIGNGRUP_WD', 'nemid_signgrup');

/**
 * Implements hook_menu().
 */
function nemid_signgrup_menu() {
  $items['nemid-signgrup-callback'] = array(
    'title' => 'NemID Callback url',
    'description' => 'The url that is called by the NemID client after authentication',
    'page callback' => 'nemid_signgrup_callback',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/nemid-signgrup-config'] = array(
    'title' => 'NemID',
    'description' => 'Configure NemID settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nemid_signgrup_configure'),
    'access arguments' => array('configure nemid signgrup'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function nemid_signgrup_block_info() {
  $blocks['nemid_signgrup_login'] = array(
    'info' => t('Nemid Login form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Configure NemID settings form.
 *
 * @return array
 *   NemID configuration form array.
 */
function nemid_signgrup_configure() {
  $form = array();
  $form['vendor_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Vendor path'),
    '#size' => 60,
    '#description' => t('The relative path to the vendor library from the drupal root.'),
    '#default_value' => variable_get('nemid_signgrup_vendor_dir', ''),
    '#required' => TRUE,
  );

  $values = variable_get('nemid_signgrup_client_config');
  $form['nemid_signgrup_client_config'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Client configuration'),
  );
  foreach (array(
    array('AUTHENTICATION_BACKEND_CERT', 100),
    array('PLUGIN_CERT', 100),
    array('PLUGIN_CERT_PASSWORD', 20),
    array('CLIENT_ID', 20),
    array('AUTHENTICATION_BACKEND_URL', 80),
  ) as $config) {
    list($config_key, $size) = $config;
    $form['nemid_signgrup_client_config'][$config_key] = array(
      '#type' => 'textfield',
      '#title' => $config_key,
      '#size' => $size,
      '#default_value' => isset($values[$config_key]) ? $values[$config_key] : '',
    );
  };

  return system_settings_form($form);
}

/**
 * Implements hook_block_view().
 */
function nemid_signgrup_block_view($delta = '') {
  $block = array(
    'subject' => '',
    'content' => '',
  );

  switch ($delta) {
    case 'nemid_signgrup_login':
      $client_conf = variable_get('nemid_signgrup_client_config', array());
      nemid_signgrup_include();
      if (!class_exists('NemIDClient') || empty($client_conf)) {
        drupal_set_message('NemID client could not be loaded because of insufficient configuration', 'error');
        return $block;
      }

      $client = new NemIDClient($client_conf);
      $block['content'] = array(
        'script_block' => array(
          '#type' => 'markup',
          '#markup' => $client->generateNemIDOtpScriptBlock('/nemid-signgrup-callback'),
        ),
        'iframe' => array(
          '#type' => 'html_tag',
          '#tag' => 'iframe',
          '#attributes' => array(
            'src' => $client->getIframeUrl(),
            'scrolling' => 'no',
            'style' => 'position:relative; width: 500px; height: 450px; border: none; margin: 0; padding: 0;',
          ),
          '#value' => '',
        ),
      );
      break;
  }
  return $block;
}

/**
 * NemID signup callback. Used to handle authentication success/failure.
 */
function nemid_signgrup_callback() {
  if (empty($_POST["result"])) {
    watchdog(NEMID_SIGNGRUP_WD, 'Result data missing from backend', array(), WATCHDOG_ERROR);
    module_invoke_all('nemid_signgrup_callback_failure', t('Something went wrong in the NemID authentication.'));
    return;
  }
  nemid_signgrup_include();
  $client_conf = variable_get('nemid_signgrup_client_config', array());
  $validator = new NemIDValidator($client_conf);
  $validation_result = $validator->ValidateNemIdResult($_POST["result"]);
  $status_code = $validation_result->getStatusCode();
  $log_message = $validation_result->getLogMessage();
  $message = !empty($validation_result->getUserMessage()) ? $validation_result->getUserMessage() : '';

  if (empty($status_code)) {
    watchdog(NEMID_SIGNGRUP_WD, 'Error retrieving error code from backend', array(), WATCHDOG_ERROR);
  }
  else {
    switch ($status_code) {
      case NemIDAuthStatusCode::Ok:
      case NemIDAuthStatusCode::ClientFlowCancel:
      case NemIDAuthStatusCode::ClientFlowError:
        watchdog(NEMID_SIGNGRUP_WD, $log_message);
        break;

      case NemIDAuthStatusCode::AuthenticationBackendError:
      case NemIDAuthStatusCode::AuthenticationPluginValidationError:
        watchdog(NEMID_SIGNGRUP_WD, $log_message, array(), WATCHDOG_ERROR);
        break;
    }
  }

  if ($validation_result->authenticationSuccess()) {
    $nemid_info = $validation_result->getNemIDInfo();
    module_invoke_all('nemid_signgrup_callback_success', $nemid_info, $message);
  }
  elseif ($status_code == NemIDAuthStatusCode::ClientFlowCancel) {
    module_invoke_all('nemid_signgrup_callback_user_cancel', $message);
  }
  else {
    module_invoke_all('nemid_signgrup_callback_failure', $message);
  }

}

/**
 * Include files from vendor directory.
 * */
function nemid_signgrup_include() {
  if (!$vendor_path = variable_get('nemid_signgrup_vendor_dir', FALSE)) {
    return;
  }
  require_once $vendor_path . '/autoload.php';
  class_alias('AuthenticationPlugin\NemID\NemIDClient', 'NemIDClient');
  class_alias('AuthenticationPlugin\NemID\NemIDValidator', 'NemIDValidator');
  class_alias('AuthenticationPlugin\NemID\StatusCode', 'NemIDAuthStatusCode');
}
